version: '3.8'

services:
  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: zerorag-app
    ports:
      - "8000:8000"
    environment:
      - QDRANT_HOST=qdrant
      - REDIS_HOST=redis
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=4
      - API_LOG_LEVEL=info
      - ENABLE_CORS=true
      - CORS_ORIGINS=["*"]
    depends_on:
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
    restart: unless-stopped
    networks:
      - zerorag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Streamlit UI (Optional - can be deployed separately)
  streamlit:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: zerorag-streamlit
    ports:
      - "8501:8501"
    environment:
      - QDRANT_HOST=qdrant
      - REDIS_HOST=redis
      - API_HOST=app
      - API_PORT=8000
    command: ["streamlit", "run", "src/ui/streamlit_app.py", "--server.port=8501", "--server.address=0.0.0.0"]
    depends_on:
      - app
    volumes:
      - app_data:/app/data
    restart: unless-stopped
    networks:
      - zerorag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: zerorag-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
      - qdrant_snapshots:/qdrant/snapshots
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__ENABLE_TLS=false
      - QDRANT__SERVICE__CORS_ALLOW_ORIGINS=["*"]
    restart: unless-stopped
    networks:
      - zerorag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/collections"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: zerorag-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - zerorag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: zerorag-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
      - streamlit
    restart: unless-stopped
    networks:
      - zerorag-network
    profiles:
      - production

volumes:
  app_data:
    driver: local
  app_logs:
    driver: local
  qdrant_data:
    driver: local
  qdrant_snapshots:
    driver: local
  redis_data:
    driver: local

networks:
  zerorag-network:
    driver: bridge
    name: zerorag-network
